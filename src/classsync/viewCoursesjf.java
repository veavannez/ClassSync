/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package classsync;

import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vea vannez
 */
public class viewCoursesjf extends javax.swing.JFrame {
    public String openAcc;
    /**
     * Creates new form viewCoursesjf
     * @param openAcc
     */
    public viewCoursesjf(String openAcc) {
        this.openAcc = openAcc;
        initComponents();
        addTableClickListener();
        updateWeekTable();
    }    
    
    @Override
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        if (visible) {
            updateWeekTable();
        }
    }
    
    private viewCoursesjf() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iFridayRBtn = new javax.swing.JRadioButton();
        logo1 = new javax.swing.JLabel();
        iSignOutBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        weekTable = new javax.swing.JTable();
        iViewCourseBtn = new javax.swing.JButton();
        iSearchCourseBtn = new javax.swing.JButton();
        iEditCourseBtn = new javax.swing.JButton();
        iInputEventBtn = new javax.swing.JButton();

        iFridayRBtn.setBackground(new java.awt.Color(0, 102, 153));
        iFridayRBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        iFridayRBtn.setForeground(new java.awt.Color(242, 242, 242));
        iFridayRBtn.setText("Friday");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ClassSync");
        setBackground(new java.awt.Color(0, 102, 153));
        setMinimumSize(new java.awt.Dimension(823, 314));
        setPreferredSize(new java.awt.Dimension(850, 400));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logo1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        logo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classsync/images/CL (2).png"))); // NOI18N
        getContentPane().add(logo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 220, 80));

        iSignOutBtn.setBackground(new java.awt.Color(242, 242, 242));
        iSignOutBtn.setFont(new java.awt.Font("SansSerif", 1, 10)); // NOI18N
        iSignOutBtn.setForeground(new java.awt.Color(0, 102, 153));
        iSignOutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classsync/images/Untitled design (1).png"))); // NOI18N
        iSignOutBtn.setBorder(null);
        iSignOutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iSignOutBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        iSignOutBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        iSignOutBtn.setIconTextGap(0);
        iSignOutBtn.setLabel("Sign Out");
        iSignOutBtn.setMargin(new java.awt.Insets(1, 10, 1, 10));
        iSignOutBtn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                iSignOutBtnStateChanged(evt);
            }
        });
        iSignOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iSignOutBtnActionPerformed(evt);
            }
        });
        getContentPane().add(iSignOutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 330, 90, 20));

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        weekTable.setAutoCreateRowSorter(true);
        weekTable.setBackground(new java.awt.Color(242, 242, 242));
        weekTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        weekTable.setForeground(new java.awt.Color(0, 102, 153));
        weekTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        weekTable.setColumnSelectionAllowed(true);
        weekTable.setFillsViewportHeight(true);
        weekTable.setInheritsPopupMenu(true);
        weekTable.setSelectionForeground(new java.awt.Color(0, 102, 153));
        weekTable.setShowGrid(true);
        jScrollPane1.setViewportView(weekTable);
        weekTable.getAccessibleContext().setAccessibleParent(jPanel2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 610, 370));

        iViewCourseBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        iViewCourseBtn.setForeground(new java.awt.Color(0, 102, 153));
        iViewCourseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classsync/images/3.png"))); // NOI18N
        iViewCourseBtn.setText("View Courses");
        iViewCourseBtn.setAlignmentY(0.0F);
        iViewCourseBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iViewCourseBtn.setFocusCycleRoot(true);
        iViewCourseBtn.setIconTextGap(0);
        iViewCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iViewCourseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(iViewCourseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 175, 28));

        iSearchCourseBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        iSearchCourseBtn.setForeground(new java.awt.Color(0, 102, 153));
        iSearchCourseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classsync/images/4.png"))); // NOI18N
        iSearchCourseBtn.setText("Search Course");
        iSearchCourseBtn.setToolTipText("");
        iSearchCourseBtn.setAlignmentY(0.0F);
        iSearchCourseBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iSearchCourseBtn.setFocusCycleRoot(true);
        iSearchCourseBtn.setIconTextGap(0);
        iSearchCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iSearchCourseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(iSearchCourseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 175, 28));

        iEditCourseBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        iEditCourseBtn.setForeground(new java.awt.Color(0, 102, 153));
        iEditCourseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classsync/images/5.png"))); // NOI18N
        iEditCourseBtn.setText("Edit Course");
        iEditCourseBtn.setAlignmentY(0.0F);
        iEditCourseBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iEditCourseBtn.setFocusCycleRoot(true);
        iEditCourseBtn.setIconTextGap(0);
        iEditCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iEditCourseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(iEditCourseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 175, 28));

        iInputEventBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        iInputEventBtn.setForeground(new java.awt.Color(0, 102, 153));
        iInputEventBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classsync/images/Untitled design (6).png"))); // NOI18N
        iInputEventBtn.setText("Input Course");
        iInputEventBtn.setAlignmentY(0.0F);
        iInputEventBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iInputEventBtn.setFocusCycleRoot(true);
        iInputEventBtn.setIconTextGap(0);
        iInputEventBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iInputEventBtnActionPerformed(evt);
            }
        });
        getContentPane().add(iInputEventBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 175, 28));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iSignOutBtnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_iSignOutBtnStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_iSignOutBtnStateChanged

    private void iSignOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iSignOutBtnActionPerformed
        int currentX = getLocation().x;
        int currentY = getLocation().y;
        
        loginjf loginFrame = new loginjf();
        loginFrame.setLocation(currentX, currentY);
        loginFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_iSignOutBtnActionPerformed

    private void iViewCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iViewCourseBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iViewCourseBtnActionPerformed

    private void iInputEventBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iInputEventBtnActionPerformed
        int currentX = getLocation().x;
        int currentY = getLocation().y;
        
        inputCoursesjf inputFrame = new inputCoursesjf(openAcc);
        inputFrame.setLocation(currentX, currentY);
        inputFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_iInputEventBtnActionPerformed

    private void iSearchCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iSearchCourseBtnActionPerformed
        int currentX = getLocation().x;
        int currentY = getLocation().y;
        
        searchCoursejf searchFrame = new searchCoursejf(openAcc);
        searchFrame.setLocation(currentX, currentY);
        searchFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_iSearchCourseBtnActionPerformed

    private void iEditCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iEditCourseBtnActionPerformed
        int currentX = getLocation().x;
        int currentY = getLocation().y;
        
        editCoursejf editFrame = new editCoursejf(openAcc);
        editFrame.setLocation(currentX, currentY);
        editFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_iEditCourseBtnActionPerformed
    
private Map<String, String[]> extractCourseDetails(String line) {
    Map<String, String[]> courseDetailsMap = new HashMap<>();
    // Split the line into parts
    String[] parts = line.split(",");
    if (parts.length >= 2) { // Ensure at least course name and details are present
        String courseName = parts[0];
        // Split course details (course code, time, day, meeting link)
        String[] courseDetails = parts[1].split("&");
        if (courseDetails.length >= 2) { // Ensure all details are present
            String courseCode = courseDetails[0];
            // Split time, days, and meeting link
            String[] timeDaysAndLink = courseDetails[1].split(";");
            if (timeDaysAndLink.length >= 2) { // Ensure time, days, and meeting link are present
                String time = timeDaysAndLink[0];
                // Split days and meeting link
                String[] daysAndLink = timeDaysAndLink[1].split("-");
                if (daysAndLink.length >= 2) { // Ensure days and meeting link are present
                    // Store course details in the map
                    courseDetailsMap.put("courseName", new String[]{courseName});
                    courseDetailsMap.put("courseCode", new String[]{courseCode});
                    courseDetailsMap.put("time", new String[]{time});
                    courseDetailsMap.put("day", new String[]{daysAndLink[0]});
                    courseDetailsMap.put("meetingLink", new String[]{daysAndLink[1]});
                }
            }
        }
    }
    return courseDetailsMap;
}

private void updateWeekTable() {
    DefaultTableModel model = (DefaultTableModel) weekTable.getModel();
    model.setRowCount(0); // Clear existing rows
    
    // Map to store courses grouped by time
    Map<String, String> timeToCourseMap = new TreeMap<>();
    
    try (BufferedReader br = new BufferedReader(new FileReader(openAcc))) {
        String line;
        while ((line = br.readLine()) != null) {
            // Extract course details from each line
            Map<String, String[]> courseDetailsMap = extractCourseDetails(line);
            if (!courseDetailsMap.isEmpty()) { // If course details are valid
                String courseCode = courseDetailsMap.get("courseCode")[0];
                String time = courseDetailsMap.get("time")[0];
                
                // Check if the time is already in the map
                if (timeToCourseMap.containsKey(time)) {
                    // Append the course code to the existing value
                    String existingCourseCodes = timeToCourseMap.get(time);
                    timeToCourseMap.put(time, existingCourseCodes + ", " + courseCode);
                } else {
                    // Add the time and course code to the map
                    timeToCourseMap.put(time, courseCode);
                }
            }
        }
        
        // Iterate over the map to add rows to the table
        for (Map.Entry<String, String> entry : timeToCourseMap.entrySet()) {
            String time = entry.getKey();
            String[] courseCodes = entry.getValue().split(", ");
            
            // Create a new row
            Object[] rowData = new Object[model.getColumnCount()];
            rowData[0] = time; // Set time in the first column
            
            // Iterate over course codes to add them to corresponding day columns
            for (String courseCode : courseCodes) {
                // Find the day for each course code and add it to the corresponding column
                String day = getDayForCourseCode(courseCode);
                if (day != null) {
                    // Map days to column indices
                    Map<String, Integer> dayMap = new HashMap<>();
                    dayMap.put("Monday", 1);
                    dayMap.put("Tuesday", 2);
                    dayMap.put("Wednesday", 3);
                    dayMap.put("Thursday", 4);
                    dayMap.put("Friday", 5);
                    dayMap.put("Saturday", 6);

                    Integer columnIndex = dayMap.get(day); // Get the column index for the day
                    if (columnIndex != null && columnIndex >= 1 && columnIndex <= 6) {
                        rowData[columnIndex] = courseCode; // Set course code in the corresponding day column
                    }
                }
            }
            
            // Add the row to the table
            model.addRow(rowData);
        }
    } catch (IOException e) {
        // Handle IO Exception
    }
}

private String getDayForCourseCode(String courseCode) {
    try (BufferedReader br = new BufferedReader(new FileReader(openAcc))) {
        String line;
        // Read each line from the file
        while ((line = br.readLine()) != null) {
            // Extract course details from the line
            Map<String, String[]> courseDetailsMap = extractCourseDetails(line);
            // If the course details map contains course codes
            if (courseDetailsMap != null && courseDetailsMap.containsKey("courseCode")) {
                // Get the course codes from the map
                String[] courseCodes = courseDetailsMap.get("courseCode");
                // If the course code matches the provided course code
                for (String code : courseCodes) {
                    if (code.equals(courseCode)) {
                        // Return the day for the matching course code
                        return courseDetailsMap.get("day")[0];
                    }
                }
            }
        }
    } catch (IOException e) {
    }
    return null; 
}


private void addTableClickListener() {
    // Add a mouse listener to the weekTable
    weekTable.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            // Get the row and column indices of the clicked cell
            int row = weekTable.rowAtPoint(e.getPoint());
            int col = weekTable.columnAtPoint(e.getPoint());
            // Retrieve the course code from the clicked cell
            String courseCode = (String) weekTable.getValueAt(row, col);
            // Check if the clicked cell is not in the time column and if a course code is present
            if (col > 0 && courseCode != null && !courseCode.isEmpty()) {
                // Get the meeting link for the course code
                String meetingLink = getMeetingLink(courseCode);
                // If a meeting link is found
                if (meetingLink != null && !meetingLink.isEmpty()) {
                    // Open the meeting link
                    openMeetingLink(meetingLink);
                } else {
                    // If no meeting link is found, display an error message
                    JOptionPane.showMessageDialog(viewCoursesjf.this, "No meeting link found for the selected course.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    });
}

private String getMeetingLink(String courseCode) {
    try (BufferedReader br = new BufferedReader(new FileReader(openAcc))) {
        String line;
        // Read each line from the file
        while ((line = br.readLine()) != null) {
            // Extract course details from the line
            Map<String, String[]> courseDetailsMap = extractCourseDetails(line);
            // If the course details map contains course codes
            if (courseDetailsMap != null && courseDetailsMap.containsKey("courseCode")) {
                // Get the course codes from the map
                String[] courseCodes = courseDetailsMap.get("courseCode");
                // If the course code matches the provided course code
                if (courseCodes != null && courseCodes.length > 0 && courseCodes[0].equals(courseCode)) {
                    // Return the meeting link for the matching course code
                    return courseDetailsMap.get("meetingLink")[0];
                }
            }
        }
    } catch (IOException e) {
    }
    return null; // Return null if no meeting link is found
}

private void openMeetingLink(String meetingLink) {
    try {
        // Open the meeting link in the default web browser
        Desktop.getDesktop().browse(new URI(meetingLink));
    } catch (Exception e) {
    }
}


public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainmenujf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainmenujf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainmenujf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainmenujf.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewCoursesjf().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton iEditCourseBtn;
    private javax.swing.JRadioButton iFridayRBtn;
    private javax.swing.JButton iInputEventBtn;
    private javax.swing.JButton iSearchCourseBtn;
    private javax.swing.JButton iSignOutBtn;
    private javax.swing.JButton iViewCourseBtn;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logo1;
    private javax.swing.JTable weekTable;
    // End of variables declaration//GEN-END:variables

}
